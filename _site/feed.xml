<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Perfect Perusals</title>
<subtitle type="text">A Website.</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://jonathanstyu.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://jonathanstyu.github.io" />
<updated>2013-08-15T16:57:55-07:00</updated>
<id>http://jonathanstyu.github.io/</id>
<author>
  <name>Jonathan Yu</name>
  <uri>http://jonathanstyu.github.io/</uri>
  <email>jonathan@jonathanyu.net</email>
</author>


<entry>
  <title type="html"><![CDATA[A Pretty Good Investment: VYM]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/a-pretty-good-investment-vym" />
  <id>http://jonathanstyu.github.io/a-pretty-good-investment-vym</id>
  <published>2013-08-15T00:00:00-07:00</published>
  <updated>2013-08-15T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;p&gt;When I wrote From Zero to Sixty on Hedge Funds, I deliberately kept from giving any sort of investment advice. It was not that kind of book. Investment advice is tough and most of the time it requires some sort of time stamp. It also spoils quickly. Something that sounds good when you write about it in March becomes the butt of jokes in April. But after a while, I came across something that I think is pretty interesting and when incorporated into the context of a proper investing mindset and style, would work many times out of ten. I want to write about it in this post here. &lt;/p&gt;

&lt;h3 id=&quot;the-parable-of-the-little-sister&quot;&gt;The Parable of the Little Sister&lt;/h3&gt;

&lt;p&gt;Let me start with a parable about my little sister. Back in 2009 she had come across a little bit of money and she had no idea what to do with it really. She figured that she would do this “investing” thing that she had heard about. Up until then I had been investing my own money on the side since 2005. I thought that I had known what to do with it. My little sister, who knew virtually nothing about investing, asked me to pick some stocks for her. I knew a few things about my little sister. One is that she would be affected by the swings in the market. She is one of those people who just did not care. She hardly knew what a stock was other than that you can sell it. She also would not be happy if she lost money in the market. She would not be able to buy boba drink and food. The last thing I knew was that she would not be needing the money for a very long time. &lt;/p&gt;

&lt;p&gt;In other words, she is a conservative, wait-it-out investor. I figured then that the most conservative, stable stocks would make sense for her. I figured that the portfolio would not grow, but it would not lose a lot of money either. It would be like one of those ovens that you see on the television. Set it and forget it. &lt;/p&gt;

&lt;p&gt;I ignored everything that was buzzing about my brain at the time - stuff that I do not even remember myself - and just picked for her the most ordinary stuff. It literally took 10 minutes to set her portfolio. Some Procter and Gamble (PG), Johnson and Johnson (JNJ), and the crowning piece, Vanguard Total Market Index (VTI). &lt;/p&gt;

&lt;p&gt;My little sister still has those stocks now. And they have grown over 60+% for her. More if her broker lets her reinvest dividends. It unfortunately does not (for godssakes never use Bank of America Merrill Lynch and she is just too lazy to switch brokers). She literally has not spent more than 5 minutes a year thinking about this portfolio. &lt;/p&gt;

&lt;h3 id=&quot;making-it-simple&quot;&gt;Making it Simple&lt;/h3&gt;

&lt;p&gt;The simplicity of my little sister’s approach is part of why it works. She knows exactly what she needs or does not need to do in order to make her investing life successful. As long as she plays her game, then she is unbeatable at it. Out of my entire family, my sister is the one whose portfolio has grown the fastest per ounce of energy spent. &lt;/p&gt;

&lt;p&gt;Her success got me thinking. I had just come out of a three month sequence where I day traded Apple, PriceLine and Google weekly options, which are complex financial derivatives that are known for their extreme volatility. I lost over $12,000 in this market in just 3 months, which is pretty incredible. You will hear more about this story in a future but it took a lot to quit. When I finally did, I was exhausted. I was tired of seeing the eTrade screen and wanted to just move away from it for good. I was ready to take the Little Sister approach. I started to research companies that I wanted to invest for a long time and not care about. &lt;/p&gt;

&lt;p&gt;I was interested in something that had all the stocks that I wanted to buy for my little sister but package them all into just 1 ticker, making it easier to buy and easier to recommend. Rather than saying, “Oh a little bit of this and a little bit of that”, I could just say, “Hey buy this then.” It would be the stock that I would recommend if I ever get that generic question, “Hey I have some money to invest. What should I buy?” &lt;/p&gt;

&lt;p&gt;This investment would be safe enough for me to comfortably recommend to friends and family. These are people I personally know who may lose money from what I pick! It has the potential to be very awkward. It also has to be really simple to explain. I should be able to explain the reasons to own this particular investment without using a chart or a lot of complex financial theory. At the same time the investment has to offer enough reward to not make this utterly boring. &lt;/p&gt;

&lt;p&gt;This is because I think that at some point you just need to find something that is decent and stick with it. You can do better on your financial and mental health if stay with something decent for a long time rather than something phenomenal but drives you crazy and you are constantly stepping in and out of. &lt;/p&gt;

&lt;p&gt;I am going to settle with VYM and I am going to tell you why below. &lt;/p&gt;

&lt;h3 id=&quot;vym&quot;&gt;VYM&lt;/h3&gt;

&lt;p&gt;VYM is the stock ticker for the Vanguard High Dividend Yield Fund. It has $9.5 billion under management. This does really mean anything except to indicate that the ETF is pretty liquid. This is good because it lets you buy and sell the shares very easily on the market without having to sell/buy at the wrong price or wait too long for your order to fill. It is run by Vanguard. &lt;/p&gt;

&lt;p&gt;The best way that I can use to describe an ETF is that it is kind of like a company except its sole goal is to hold other companies’ shares. You would buy the shares and through owning one share of this ETF, you own a proportion of shares of other companies. &lt;/p&gt;

&lt;p&gt;My criteria in selecting VYM as the aforementioned “generic recommendation investment” is the following: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An ETF With Low Fees&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It had to be an ETF to help diversify your risk and get as much of the market’s performance as possible. This meant that it had to have very low fees. You do not want to pay a lot of money in fees the ETF’s provider. A high fee count (usually 1% or higher. 2% is hedge fund status) sucks away your investing performance. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://images.businessweek.com/ss/08/09/0904_first_jobs/image/vanguard.jpg&quot; style=&quot;width: 200px&quot; /&gt;
	&lt;figcaption&gt;Vanguard Group&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I liked Vanguard for a few reasons. First is that they are a very large fund family. They are pretty no-nonsense and I like their philosophy of low cost indexing. Second I also like that their incentives are aligned with the investors. The other big fund families are iShares and WisdomTree. Both are publicly traded. iShares is owned by BlackRock (BLK) and WisdomTree is WETF. This is pretty cool, but it means that they are never going to be fully incentivized to deliver the lowest fees to you. Vanguard is not a publicly held company. Its shares are held by the very funds that it manages. So when you are a VYM shareholder, you not only own the shares in the ETF, but you own a bit of Vanguard too. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Portfolio is Good&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;VYM holds 388 companies with a median market cap of $115 billion. This means that companies in the index are not likely to disappear anytime soon. It is evenly distributed across a number of industries with at least 10% in Consumer Goods (15%), Financials (12.8%), Health Care (12%), Industrials (14%), and Oil/Gas (12%). These companies are weighted to the SP500 and are selected for their higher than average dividend yield. &lt;/p&gt;

&lt;p&gt;I was looking for companies that return capital to their investors often. If you dive in the financial theory, there is an argument that you can make for investing in companies that do not pay a dividend like Berkshire Hathaway, where a company can do better with the excess capital than you can. However, in reality, there is little psychic dividend that you can get from a dividend-less company. Receiving a dividend credit for holding shares in a company is immensely satisifying even if mathmetically you are doing nothing more than deducting from the principal stock price of the shares. For many people, I consider that more important because it contributes to good investing habits. Having that mental satisfaction means that people stay invested for a long time.&lt;/p&gt;

&lt;p&gt;I was looking for companies that are the backbone of the US economy and boast huge moats. Even if they did not, then it does not matter. If such a company would start to decline and vanish, the index would remove them from the ETF. &lt;/p&gt;

&lt;p&gt;The top five holdings are: &lt;/p&gt;

&lt;p&gt;1) Exxon Mobil
2) Johnson and Johnson
3) General Electric 
4) Chevron
5) Microsoft
6) Wells Fargo 
7) Proctor and Gamble
8) JP Morgan Chase
9) Pfizer 
10) AT&amp;amp;T &lt;/p&gt;

&lt;p&gt;All of these companies pay a good dividend, are dominant in their field and exhibit low volatility. Low volatility means that the prices are less likely to swing a lot from day to day. This is important because maintaining prices means that if there comes a time you need to sell your shares for whatever reason, it is likely that you are not selling into crippingly low prices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dividend is Decent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A high dividend yield ETF should do better yield wise than that of the SP500, which is generally the standard people go by as the market. It changes from time to time, but the SP500’s dividend yield as of August 2013 is about 2%. Right now VYM yields about 1% more than that with 3%. Yeah that is not a lot. I am going to admit that. However it builds up over time. And when the stock price goes down, the yield goes up. There is an opportunity then to buy a lot more shares. &lt;/p&gt;

&lt;p&gt;No, it is not like Annaly or AGNC’s 20% yield. But unlike those companies, the yield from VYM is stable. Wherever I have looked for something with a higher yield than that 3%, the things that I have found also have issues that concern me. 3% seems to be the best you can do without delving into things that might keep you up at night. I am through with that crap.&lt;/p&gt;

&lt;h3 id=&quot;simple-strokes-for-simple-folks&quot;&gt;Simple Strokes for Simple Folks&lt;/h3&gt;

&lt;p&gt;Some great things that I have heard about investing over time: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Trading is hard and it should be done by people who care for it. Not everyone does. That is okay. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hedge funds charge high fees. They are not always deserving of these fees. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Action is the enemy of the investor. The less you do, the better. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not going to get rich investing. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Doesn’t really matter what you do. Just that you stick with it. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Buying stocks should be like buying a car for most people. Do not opt for the yellow Beetle with the Pikachu tail. Buy the Corolla. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like the last one the best, especially as someone who cares very little for cars. You do not buy the exotic electric vehicle if you need it to help you get to work and the grocery store everyday. There is a time and place for it. Same with stocks. Buy the Corolla for investment vehicles. &lt;/p&gt;

&lt;p&gt;There are many in my peer group who are big on real estate. Their entire young adult lives they are saving so that they can put down that $60-80K for that 20% down payment. I am not excited about that particular prospect myself. If that is how you want it, then yes you should go buy that first house. There is merit in your approach and the more important thing anyway is how you raise money for that investment - steady saving and living below your means - but I have been a stock guy for a very long time. I like that it is a living, breathing asset - an entity that does not die or get injured. A share of stock does not get hit by a volcano in Hawaii. Does not get older or tarnished. It keeps its freshness over time. &lt;/p&gt;

&lt;p&gt;As for putting my money where my mouth is, VYM is the second largest investment that I have in my portfolio. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/a-pretty-good-investment-vym&quot;&gt;A Pretty Good Investment: VYM&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on August 15, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Attack on Titan Episode 18]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/attack-on-titan-18-breakdown" />
  <id>http://jonathanstyu.github.io/attack-on-titan-18-breakdown</id>
  <published>2013-08-14T00:00:00-07:00</published>
  <updated>2013-08-14T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;figure&gt;
	&lt;img src=&quot;http://cdn.myanimelist.net/images/anime/5/44560l.jpg&quot; style=&quot;width: 200px&quot; /&gt;
	&lt;figcaption&gt;Image courtesy of MyAnimeList&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;I am really enjoying the series Attack on Titan. I enjoy not just the fact that it is a very interesting world - low fantasy with a bit of steampunk - but I also love that it is just a very good action series. The source material strikes the right balance of action, suspense, and “oh crap” moments. Cliffhanger after cliffhanger month after month. Sometimes the tricks are cheap. Sometimes they are brilliant. The author does a good job of just doing crazy stuff month after month after month. I have heard that he has planned out the entire story before even sitting down to start a single panel of the manga. Such planning, if true, is evident in the huge amount of foreshadowing in early volumes that, when you go back to read them again, are now oh so obvious once the scales have fallen from your eyes. &lt;/p&gt;

&lt;p&gt;The anime follows the manga’s plot closely and in general does not try to mess up a good thing. The main problem is that there are only 48 chapters in the manga out right now (one a month, and it has been going for about 4 years now). Because of the artist’s rather slow pace (due to his drawing style and its action packed tone), the anime has to deal with the fact that if it were not careful then it could go really too fast and overtake the manga, creating a Game of Thrones like problem that will be unpleasant. &lt;/p&gt;

&lt;p&gt;In the early episodes, it seems like the studio is having trouble getting its feet under itself. There are copious amounts of still images and frames where it seems like they are rushing to get this done in time and falling behind in animating the entire show. Or perhaps they just did not have a budget. The studio was a spin off from a much larger, more established production studio and they were probably also dealing with logistics issues from the very beginning. Not only that, the head producer has said that he was not sure that this would be a hit. In &lt;a href=&quot;http://animediet.net/conventions/transcript-george-wada-producer-attack-on-titan-press-conference&quot;&gt;an interview&lt;/a&gt; he said: “&lt;em&gt;To be honest, in Japan, the most popular anime are the ones with moe characters, a lot of girls in it, and no cruel scenes. I thought these were the shows that would make it big, so initially I thought Attack On Titan would be a minor hit at best.&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;The show turned out to be a whole lot more than that and it has caught on very quickly. Presumably, an increased budget and more stable footing has come along with this unexpected popularity. The result has been quite clear in how dramatically the production values have improved in the second half of the season, the female titan arc. The story is one of the gut wrenching arcs in the entire print series (there are admittedly only 4). Now animated, it has probably the best action scenes that I have seen in a series since Full Metal Alchemist Brotherhood. In this post, I want to break down one sequence in particular from episode 18, the chasedown of the protagonist Eren and his group of fellow squad members by the eponymous female titan.&lt;/p&gt;

&lt;p&gt;This scene begins at roughly 19 min 53 seconds into the 24 minute episode. &lt;/p&gt;

&lt;h3 id=&quot;setting-the-tension&quot;&gt;Setting the Tension&lt;/h3&gt;

&lt;p&gt;Entering the scene, there is sense of dramatic irony overhanging the show’s characters. What is dramatic irony? It is a narrative device in where the viewer is given a piece of information that at least one of the characters in the narrative is unaware of. The female titan has already made its appearance to the viewer in episode 17 and it has already been shown earlier in episode 18 destroying a number of the scout group. Furthermore, it was discerned and revealed to the viewer that the titan is seeking the protagonist Eren for reasons unknown. The viewer is aware of this but Eren is not. &lt;/p&gt;

&lt;p&gt;Building further and adding yet more to the tension, Eren and the group of titan-hunters he has been grouped with do not know just how dangerous this particular female titan is. That it has so far killed over a dozen of their comrades with relative ease. The only indication to them that there is something wrong are the constant sending up of black smoke flares that do little to actually convey the sheer danger they are in. &lt;/p&gt;

&lt;p&gt;Tense enough yet? Well, beyond what the viewer already does know is what he doesn’t, layering on a classic atmosphere of Hitchcockian suspense. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://s1.ar-static.com/images/tumblr/Shingeki_no_Kyojin_-_18_4.jpg&quot; alt=&quot;Courtesy of Tumblr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Earlier in the episode, the commander approaches a dense forest of old growth trees and passes orders down to his entire troupe to split up. Eren’s group would travel through the forest while the rest of the team is told to stay in the trees and keep watch over the perimeter. This does not seem to make sense. Eren looks around and is shocked to find that the rest of his group mates, who he looks up to and respect as very experienced titan-killers, to be just as puzzled and confused over the mysterious set of orders.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://31.media.tumblr.com/a3e989b446b1734d7d022c44aeaa2dc1/tumblr_mrcfmft0Pd1qbqk5qo2_250.gif&quot; alt=&quot;Courtesy of Tumblr&quot; /&gt; &lt;/p&gt;

&lt;p&gt;This sets a tension that is permeated throughout the entire scene to follow, that of uncertainty. The commander has passed down orders that at the surface seem incomprehensible and certain to lead to death. It is within this uncertainty that they are expected to finally face down the thing that has been killing their groupmates. &lt;/p&gt;

&lt;p&gt;The last thing that we as viewers do not know is the female titan’s actual location. It is not shown entering the forest. Thus the viewer is kept in suspense about how close it really is to Eren and his group. Up until the scene begins we do not know its location. Only another black smoke flare, accompanied with a pounding ominous music, gives a rough approximation of its location. It could very well be meters away from Eren himself. Wisely, a la the shark from Jaws, the director keeps the titan’s placement veiled until the absolute last moment for the big reveal. &lt;/p&gt;

&lt;h3 id=&quot;the-bomb-under-the-table-ticks&quot;&gt;The Bomb Under the Table Ticks&lt;/h3&gt;

&lt;p&gt;The scene begins with the hiss of black smoke. Like the floating yellow shark barrels in Jaws, they are a sudden signal that the peace is over and things are about to happen. It is a declaration. We immediately hit the ground running. Eren and his five comrades are riding horses through the forest, led by their corporal Levi. Levi leads the way, not looking back. He gets himself battle ready (by pulling out a pair of swords) and warns the rest of the troupe that when the threat arrives it will be seen for a very brief second. He is wrong in this assessment, but the viewer (and Eren too) does not know that. Thus the viewer is set in a tone of mood that his eyes are darting across the entire screen. He watches everything. Looks for everything. Anything that might be a threat. It puts us on high alert, draining our energy and coiling our stomachs. &lt;/p&gt;

&lt;p&gt;The music plays its part as well. A strong rhythmic beat begins, accelerating. It meshes with the patter of the horses’ hooves, adding its own part to the rhythm. We are not sure what is going on. We cannot see it, but we can hear it. The music is at just the right rhythmic speed that it puts us on edge. It is faster than our own heart beat and subconsciously our brain adjusts our heart beat to match it. This physical action has a strong emotional impact and the suspense starts to get to us in a real bad way. &lt;/p&gt;

&lt;p&gt;Suddenly we see a lone soldier break into view from a patch of trees. He is not looking at the screen, facing away towards another direction. It instinctively makes us look away too. We want to see what we cannot. This is the same situation as that of Eren. Eren cannot see what this single soldier is seeing. We want to see what it is. How close is it? When will it finally appear?&lt;/p&gt;

&lt;p&gt;The music dulls and slows down, mimicking those momentous events in our lives when we suddenly remember everything in a single second. In reality, our brains are not really recording everything in slow motion. It is in fact a post-event effect of our memory. Our brains have marked this particular event as truly important so it makes a point to enter every second of it into memory. And when we play it back in our minds, we see so much more detail. The result is like taking high speed footage of an event and playing it at a regular 60 frames per second. It is slow. Filmmakers try to emulate this technique to try to stimulate a similar response. We need to take in everything. We need to pay attention. &lt;/p&gt;

&lt;p&gt;Then suddenly the female titan makes her appearance in a fast, real fast burst. The camera jolts and jerks (note this for future reference) and the perspective suddenly twists about. We are not sure what is happening and disorientation sets in. We are confused and in that instant of confusion, the titan appears from behind a tree and smacks down the unnamed soldier like so much a fly. The music announces her presence with a loud explosive BANG. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://31.media.tumblr.com/84f33f7274ae2123c6827892e3ad08cb/tumblr_mri085MSTj1qlpa51o3_500.gif&quot; alt=&quot;Courtesy of Tumblr&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-titan-appears&quot;&gt;The Titan Appears&lt;/h3&gt;

&lt;p&gt;Things suddenly move very fast from here. Levi shouts out the order to “Run!” and the music picks up the pace. The viewer feels tense and on-edge from a suspenseful scene because they are aware of their own lack of knowledge about the development of something meaningful on the screen. The source of the suspense has changed. The focus is no longer on where the titan is, but instead on the chase. The female titan is now present on the screen so that tension has been relieved. However, several other elements are added. &lt;/p&gt;

&lt;p&gt;The titan has appeared and Eren’s group mates quickly fill in some necessary exposition in order to inform Eren and the viewer of the gravity of their situation. The Titan is fast. Though it starts quickly behind them, it is faster than their horses can cover. It quickly gains on them. Camera-wise, the animators help ground this feeling with one particular scene that establishes the relation of distance between the female titan and Eren. After quickly killing the soldier, the camera cuts to several closeups of the characters, but then switches to one extended action sequence where the camera pans away from the group quickly to the left to show the titan running at pace with them at a distance away. The titan then abruptly changes direction to approach the fleeing group from the right side. She leaps through a tree in the way smashing it into wooden bits and there is a quick instant where she hovers over Eren in slow motion. She reaches for him but misses and falls behind them. However she quickly recovers and rejoins the chase. &lt;/p&gt;

&lt;p&gt;It is a great sequence with many of the slow-mo elements we have seen earlier. However it is included for more than to just show off the animators’ talents. This particular sequence definitively establishes their relational positions in space between the relevant characters in the scene: The female titan and Eren’s group. If you notice, because of the sheer scale of the players, we do not have context references for who is what and is where. This “pan back” distance type shot lets the viewer know immediately that the titan is right on their tail and is not very far back. We know that this is no gimmick of the camera (in other words, no cheap cuts). The titan is right there. &lt;/p&gt;

&lt;p&gt;This establishment of relational positioning is important in keeping the viewer from getting confused about who is where. Without scenes and references like this, someone can get too bogged down in the question of “What is going on?” and be distracted from the feeling of “Oh no, what is going to happen now!” In addition, knowing exactly where the titan is in relation to where Eren is lets the viewer extrapolate in their own heads about just how much time they have left before they are overrun. The more extrapolation &lt;strong&gt;intentionally&lt;/strong&gt; left to the viewer, the more suspenseful and tense the scene turns out to be. &lt;/p&gt;

&lt;p&gt;And do not forget that there is still one major tension lingering in the background of the viewer’s mind: The viewer remains unaware of whether or not the appearance of the titan has been planned for. In other words, whether the commander - who, if you remember, passed down specific orders to split up the troupe and send only Eren’s group alone down the forest path despite the apprehensions of Eren and even many of his more experienced soldier peers. Their tension is shared by the viewers as well. &lt;/p&gt;

&lt;h3 id=&quot;grab-pull-and-die&quot;&gt;Grab, Pull, and Die&lt;/h3&gt;

&lt;p&gt;Now the scene is established. We know exactly where Eren and his pursuer is. We know what we are to be uncertain of and why. It is time to escalate the stakes. Three soldiers appear from behind the female titan, offering reinforcements. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://24.media.tumblr.com/ca7f995bb2c5d8828335f98fb88fcfbf/tumblr_mrdt3oDWhf1ql41ypo1_500.gif&quot; alt=&quot;Courtesy of Tumblr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at both the clips above and below, we note a few things.&lt;/p&gt;

&lt;p&gt;First, we get flash second glimpses of the soldiers’ faces before they killed in a bloody burst of a cloud. This is a deliberate choice by the animators. You would think at first, “Wait a second, why bother to spend time to give tangible facial expressions to something you would see for less than a split second?” These take time, money and investment to design, draw, and animate. It is not just an attention to detail. It is about taking advantage of our ability to subconsciously process imagery very quickly. We see their faces even though we do not “see” them. Not seeing them would take us out of the scene and we would break the emotional impact. &lt;/p&gt;

&lt;p&gt;Second, notice that the entire scene (despite the gifs breaking it up into two) is just one cut. This is also deliberate because it then gets to show off the camera’s jolting movements. What path is it following? Let us track it. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The soldier fires off a pylon and the camera tracks its movement, quickly it propels itself backwards away from the soldier at a fast speed. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It bursts through the female titan’s hair, just barely missing it and the camera seems to follow the pylon right through the spread of her hair &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The camera would continue along but suddenly the female titan grabs the wire attached to the pylon and arrests its movement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;She pulls and the camera stays fixed and suddenly the helpless soldier is brought into the briefest of focuses very very quickly before being crushed against the tree in a cloud of blood&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The camera slows its movement to give extra emphasis, slowing down the sequence events so that viewer can absorb the details. However, the camera does not linger too long. Now comes the immediate next scene. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://31.media.tumblr.com/a5c1d6b04cc160205a692f19f45132b1/tumblr_mrdt3oDWhf1ql41ypo2_500.gif&quot; alt=&quot;Courtesy of Tumblr&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The female titan spins on her heels (in a nice bit of flair from the animators). The camera pulls back far far away from her. It is almost like as if the camera, echoing our own thoughts, wants to get as far away from her as possible. We want to escape too. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second soldier swings into view and gets close to the camera and we see his face and it seems like as if he might get away&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The camera stops its backwards movement and suddenly we are being pulled back towards the female as she grabs the soldier’s pylon-wire and drags it back towards herself&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The soldier is crushed between the female titan’s fingers and the scene ends with her eyes filling the entire screen gazing out towards the viewer &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in this quick sequence the camera bursts backwards, stops abruptly, then pulls backwards again faster before quickly reversing and exploding forwards. This short sequence seeks to emphasize the female titan’s agility, intelligence, and brute strength. The movements she executes the viewer experiences through the camera’s jolts and they reverse quickly and always convey a sense of great movement.&lt;/p&gt;

&lt;h3 id=&quot;the-cliffhanger&quot;&gt;The Cliffhanger&lt;/h3&gt;

&lt;p&gt;The speed and quickness with which the reinforcements were dispatched does the job it is meant to do. It  is shocking. But to add to the impact, the immediate next cut shows Petra, one of Eren’s team members, looking back off screen at what we presume to be the scene we just saw, turning her head forwards to Corporal Levi and asking in a cracking voice for orders. This reaction shot - a shot that shows not the actual event but observers’ reactions to it - is a powerful mood setter. Recall Darth Vader’s first scene in the movie the Empire Strikes Back. He slowly walks towards a group of Imperial Officers and the camera focuses not on him but instead on the facial expressions of everyone else around him … watching him. By watching not the subject but rather the reactions of other people &lt;em&gt;in the scene&lt;/em&gt; we are subconsciously influenced to mirror those feelings. In the case of Petra and Eren, the moods we are influenced to mirror are simple: abrupt shock and sheer fear. &lt;/p&gt;

&lt;p&gt;The scene ends with a cliffhanger, but the rampup to it is handled expertly. Near the end of the scene, they flash to a high perspective, looking down on the group as they flee the approaching titan and the way that the camera is set up the approaching titan is mere meters away from them, creeping up from the bottom right of the screen.&lt;/p&gt;

&lt;p&gt;The rest of the group call out to Levi, who up until now has not said a single thing. While the rest of Eren’s groupmates nearly break out in panic, the leader has remained silent. He is a naturally silent and stoic character. Does he know what to do? Is this all part of the plan? It is not for certain, and when Levi finally reacts and does something, the scene abruptly ends with cut to black. &lt;/p&gt;

&lt;p&gt;Action scenes are tough to coordinate and direct. This is because action in the real world is not nicely coordinated. It is marked with craziness and chaos. The movie director’s job is to bring order to that chaos with good camerawork and expert but sparse dialogue. This simple scene in Attack on Titan has a simple premise: The female titan is chasing Eren and closing quick. However, the nuances underneath its execution demonstrate something really impressive. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/attack-on-titan-18-breakdown&quot;&gt;Attack on Titan Episode 18&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on August 14, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Apple in 2013]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/apple-in-2013" />
  <id>http://jonathanstyu.github.io/apple-in-2013</id>
  <published>2013-08-11T00:00:00-07:00</published>
  <updated>2013-08-11T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;figure&gt;
	&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Apple_logo_black.svg/200px-Apple_logo_black.svg.png&quot; style=&quot;width: 200px&quot; /&gt;
	&lt;figcaption&gt;Courtesy of Wikipedia&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In 2012, I published a book on Amazon called “Apple and Samsung: A Love Story.” It had first started as a book in where I take a deep look at the entire company, its environment, and its products. That part of the book was quickly overtaken by the section on Samsung Electronics, which I had then identified as Apple’s foremost challenger in the cell phone space. Samsung is a company that does not have a lot written about them by journalists and such, but there was a lot of case studies and academic material available on Google Scholar and I was able to mine that for a lot for information about the company’s culture, its structures, and its history. Some great papers include &lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S0024630107000714&quot;&gt;“Samsung Motors”&lt;/a&gt;, &lt;a href=&quot;http://onlinelibrary.wiley.com/doi/10.1111/0022-1082.00115/full&quot;&gt;“Samsung’s Ownership Structure”&lt;/a&gt;, and &lt;a href=&quot;http://papers.ssrn.com/sol3/papers.cfm?abstract_id=556923&quot;&gt;“Samsung’s Mobile Phone Business”&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A lot of what I wrote in the book about the company’s culture of innovation and relentless competitiveness is still relevant. After all, Samsung has taken a big bite out of Apple’s iPhone market, which I identified as pretty much the only revenue/profit engine that matters in the company. From what I understand though, it seems like some new factors have started to be thrown into the mix. I did not want to go back into the book and write it all out so here it is as a post on the site. The first one since I left App Academy.&lt;/p&gt;

&lt;h3 id=&quot;summarizing-the-book&quot;&gt;Summarizing the Book&lt;/h3&gt;

&lt;p&gt;In the book, I suggested that Apple should take its iPhone schedule and split it into two. At the time as it is now, Apple releases 1 iPhone a year. This used to be in July or so (with WWDC) before switching it to the fall with the iPhone 4S presumably so that it could take advantage of the holiday buying season. The problem with this is that an entire year goes by without a new iPhone. There are advantages to this of course. The new iPhone is always hard to make (The CEO of Foxconn, Apple’s supplier, has said that the iPhone 5 in particular is the most difficult product that the company has ever put together) and the long season gives them time to get it down to an art, improving yield. &lt;/p&gt;

&lt;p&gt;The problem with this schedule is that it is just too much time in between new products on the market. It gives opportunity to Android competitors to iterate and come out with a lot of features, leaving the iPhone behind. I suggested that Apple should switch the iPhone to a two-tiered schedule. The “S” version of the phone - the ‘4S’, ‘3S’, and such where the upgrade is on the software side rather than the hardware side, would be released in July and the hardware upgraded phone - a numbered iPhone - would be released in September/October (September better than October. The 4S was in October and it was late even then). This way there would be two phones every year that could be sold to the market. Apple did not take up this schedule. The new iPhones continues to be released 1 year apart, though it might seem to be the case that there are two models this time. &lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/en/thumb/d/da/China_Mobile_Logo.svg/200px-China_Mobile_Logo.svg.png&quot; style=&quot;width: 200px&quot; /&gt;
	&lt;figcaption&gt;China Mobile - essential to Apple in China. Logo courtesy of Wikipedia.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The second thing that was essential to Apple’s growth and continued dominance would be its performance in China. Apple in 2011-2012 had been absolutely growing gangbusters in China. The performance of the Asia Pacific unit had grown from some several hundred million to $8 billion in Q2 2012. To continue this growth, I wrote that Apple should look to open a whole bunch of new stores (they talked about dozens several years ago) as well as complete a deal with China Mobile, the biggest telecom operator in the world. Considering that China Mobile is larger than Unicom and Telecom combined and the new iPhone 5 has shown itself capable of connecting to and using the telecom’s unique cellular standard, it seemed that it was important that Apple was to get on that network and that the company knew it. &lt;/p&gt;

&lt;h3 id=&quot;what-is-the-iphone-to-apple&quot;&gt;What is the iPhone to Apple?&lt;/h3&gt;

&lt;p&gt;The statistics have not borne this out though, as the gross margins have declined from last year and the first quarter with the new iPhone 5 on the market and net income for the 3 months ended June 29th declining some $2 billion from the previous year. &lt;/p&gt;

&lt;p&gt;It used to be that the iPhone was the company’s main driver of profit growth. The 4S version of the phone had some 50% gross margins and sold in the millions. Because of the unique arrangement it has with the telecom operators like Verizon and AT&amp;amp;T, the iPhone was a $800 product that sold like it was priced some $500 less. This is pretty much unique in the consumer electronics world. The 5 though is something different. It seems like the gross margins are much lower for this product. I checked through the cost of the bill of goods and it is not all that much different from that of the 4 and 4S so it probably has something to do with the yield of the phone’s manufacturing. If yield is low, the bad products’ costs are rolled into the costs of the phones that do make it to the market. The iPhone’s scratchable metal case and really thin screen seems to have impacted its manufacturing yield. &lt;/p&gt;

&lt;p&gt;It used to be that when Apple sells a lot of iPhones, it makes a whole lot of money and we did not have to worry about anything else, so overwhelming did the iPhone’s profits dominate the company financial condition. In 3Q2013, this did not seem to be the case. Apple overperformed on the iPhone, selling over 31 million when some analysts were expecting in the twenties. What happened though was that this did not immediately lead to a huge beat in the net revenue numbers. In fact, it missed those estimates. People are buying the cheaper 4S over the 5 as ASP declined. It is true that it is cheaper to make a 4S than a 5, but that does not seem to be enough to outweigh the drop in price (usually about a $100 decline from one model to a year older).&lt;/p&gt;

&lt;p&gt;Not only that, the decline in profits from the shift from the iPad Jumbo to the iPad mini seem to be hitting the bottom line. In the book I argued that the iPad’s profits were nice but did not move the needle. The margins, which were estimated to be something like 30%, were too small in comparison to the iPhone. Well I did not expect the iPad Mini - a product I love a whole lot personally by the way - to start a downward trend in profit margin. The product was popular and the result was a decline in profit. The profit we expected to come from the iPad division was lost and it was not made up by the iPhone. &lt;/p&gt;

&lt;p&gt;So now instead of having two great products delivering profit, there are two headaches. The iPhone is getting older and its product line is maturing. Customers no longer need to have the latest model. And the iPad tablet computer space has grown faster than any product before, but as I feared in my heart, it was not because the market was necessarily bigger. It was because the infrastructure - from the retail stores to the Foxconn assembly line - already existed to make tapping that market faster. The stats that talked about the iPad growing faster than the iPhone ever never really did say anything about the legitimacy of the entire market. It grew faster than anything else before but that only meant that it hit the wall that much faster. &lt;/p&gt;

&lt;h3 id=&quot;the-china-issue&quot;&gt;The China Issue&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://farm8.staticflickr.com/7009/6684953659_f8276b8da4.jpg&quot; style=&quot;width: 200px&quot; /&gt;
	&lt;figcaption&gt;Courtesy of Elizabeth Phung on Flickr (http://www.flickr.com/photos/lizphung/6684953659/)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As for China, the once-growth engine is now a drag on growth. In 2012, Apple delivered $8 billion in a single quarter from its Apple sales. One year later, &lt;a href=&quot;http://techcrunch.com/2013/07/23/apple-international-q3-2013/&quot;&gt;revenues in that area has dropped some 43%&lt;/a&gt;. It has been a year and none of the things that we pointed out should happen strategically in Apple has happened. There are still only 8 flagship Apple stores in China, a country with over 1 billion people. &lt;/p&gt;

&lt;p&gt;Additionally, the iPhone remains missing on China Mobile. Who knows why this is the case. Since the technical hurdles have largely been cleared, it seems to be something about the terms of the agreement. Perhaps there is some sort of demand that Mobile wants that Apple is absolutely not willing to give like a China Mobile branded iPhone or pre-installed apps on the home screen. Whatever the reason and however legitimate such a reason would be, iPhone’s competitors from Xiaomi, ZTE, and Samsung are on that platform and being actively sold. Considering that I wrote in the book that I considered Apple’s biggest strategic dropped ball was to allow the rise of Android by not releasing a Verizon version of the iPhone as soon as possible, this is probably hurting Apple in China. To what extent? Who knows. Not all of China Mobile’s customers can afford an Apple iPhone and the majority of the network’s customers are not on 3G either, which cuts down on the number of potential customers available. However, it still means much that the iPhone is not on the biggest network on the planet. &lt;/p&gt;

&lt;p&gt;New issues have arisen in China. The government has criticized the company for its arrogance, tarnishing the brand and forcing the company to issue an apology for some of its actions over there. Personally I found the actual tiff - something about return and guarantee policies - just that, a tiff, but it seems that it was the ripe thing for the government to take advantage. In the end it could have been anything but it seems like having an American company dominate such a vital part of the Chinese market was troubling to the Chinese. They took efforts to curb Apple’s growth in China, something that I thought about while writing the book but did not mention. In my heart, I suppose I did not want to believe it. In light of the new revelations about Apple’s cooperation with the NSA and other American government agencies for intelligence, the Chinese government is going to take bigger and bolder steps to curb Apple’s growth in China. Many tech companies I knew were going to get hurt by these revelations, but Apple - so reliant on the China market - had the most to lose. It lost badly. &lt;/p&gt;

&lt;h3 id=&quot;the-future&quot;&gt;The Future&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://allthingsd.com/20130810/circle-sept-10-on-your-calendar-for-apples-big-iphone-event/&quot;&gt;AllThingsD broke the report&lt;/a&gt; that the new iPhone was to be announced to the world September 10th, 2013. It is the first set of news to come out in a while. Will people line up for it as they did for the 5 or the 4s? In some numbers yes … but enough?&lt;/p&gt;

&lt;p&gt;I had scarcely thought about Apple’s new products in 2013. For the entire year they had basically vanished and stayed under the radar. They released just 1 new memorable product, the new 12 hour MacBook Air in the summer (I guess the new Mac Pro too but few people are going to buy that). It is troubling to think that the company has gone through nearly 9 months in 2013 selling the same thing that they sold back in November 2012. True they went through a near total refresh that holiday season, but it seems like that they had shot their wad too soon. The benefit from having all those refreshes in the holiday season led to their biggest revenue quarter ever, but it left them spent for the rest of the year and the loss in mind share probably outweighed the financial gains of having all those bullets in the air during the holidays. The biggest Apple stories in the first half of 2013 to me was their huge buyback, their bond sales, and increased dividend. &lt;/p&gt;

&lt;p&gt;I do not really have answers for the future of Apple and the iPhone. I sold my stock a long time ago so I no longer have a financial interest in the company but I still like Apple products. I write apps in RubyMotion and sell books on their iTunes Bookstore. I could suggest a few things, but I do not think that Apple will take any of those suggestions. I could suggest some sensible things, but I am not sure that the company will take up even those. It is tough to project what the company will do in the future, a negative sort of uncertainty that I think is troubling. Very troubling. It is more likely that they will do nothing and stay the course, whatever that may be in their minds. Who knows what it might be in their minds. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/apple-in-2013&quot;&gt;Apple in 2013&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on August 11, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Elysium]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/elysium-review" />
  <id>http://jonathanstyu.github.io/elysium-review</id>
  <published>2013-08-10T00:00:00-07:00</published>
  <updated>2013-08-10T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;p&gt;On Saturday I went to go see a movie called Elysium, directed by a guy named Neil Blomkamp. Do not ask me how to pronounce that, because I cannot. Wikipedia has a pretty good description of how the movie goes but here is the total plot summary. It is the 22nd century and the world is overcrowded and running out of resources. The sort of Malthusian nightmare that people have nightmares about.&lt;/p&gt;

&lt;h3 id=&quot;the-plot&quot;&gt;The Plot&lt;/h3&gt;

&lt;p&gt;There is a lot of interesting world building here. Los Angeles is majority hispanic and there is a lot of language switching between English and Spanish. You get to meet a whole lot of different characters from Los Angeles, the riff raff of the world who look like ordinary folks, cuss and fight. There is a thriving “criminal” organization that tries to illegally transport people from the earth to Elysium, presumably so that they can use the medBay, some sort of MacGuffin of a device that heals people in a single instance. They set this up with a desperation run early in the movie. Three space ships make a blatant run for the Elysium border. Jodie Foster has a sleeper agent (who would later be a villain in the movie, played by the protagonist from District 9) shoot two of them down with a ground to space missile. It was played to be cruel and merciless. It definitely was, however all I could think while watching was how the missiles could have enough fuel to reach space and why they did not send said missiles from Elysium itself. &lt;/p&gt;

&lt;p&gt;This incident causes repercussions in the system and Jodie Foster, who plays the ultra hawkish Defense Secretary, gets fed up with the system. Irritated by her reprimand, she goes and engineers a deal with the CEO of a defense contractor. The defense contractor will go and reboot the entire system of Elysium and that would make her the President. The President would then go and hire the CEO’s company for all the product that they would make in the future, guaranteeing riches and shareholder profits ad infiniteum. This is illustrative of corporate greed and the defense-commercial self-feeding beast. &lt;/p&gt;

&lt;p&gt;At the same time, Matt Damon plays a criminal on parole. He was arrested for boosting cars. He meets the childhood friend of his, and is looking forward to a date with her when suddenly he gets caught in a radiation vault at his work. The radiation vault gives him a fatal dose and now he has 5 days to get to Elysium so that he can use a med bay. He arranges a deal with a former contact in the underworld, the same people who organized the blatant run to Elysium that we saw earlier in the movie. &lt;/p&gt;

&lt;p&gt;This is a pretty interesting setup, and it is the first few scenes of the movie. You would think then that the rest of the movie blossoms and blooms into a deep introspection of the relevant issues. The repercussions of a secret deal between a corporation and the government organization that hires it. The morality of breaking the law to save your own life and that of those you love. The dilemma between maintaining resources for posterity and the evil morality of withholding them from people who need them. The place for the everyman in a technologically advanced where droids can do the majority of the work that humans can do. &lt;/p&gt;

&lt;p&gt;Alas, none of this is hit upon. The movie mostly runs on these few premises to make Matt Damon run around, fight people and shoot guns. He wears a metal frame and then fights people. Then Jodie Foster is killed by her own sleeper agent employee, and decides that she would rather die than live to face the consequences of the world she created. Matt Damon gives control of Elysium to the underworld boss who shows himself to have a heart of gold by instantly making every citizen of earth a citizen of Elysium for free which causes the automated system to send med ships to the surface so that everyone can get healed. &lt;/p&gt;

&lt;h3 id=&quot;the-issues&quot;&gt;The Issues&lt;/h3&gt;

&lt;p&gt;There are elements of the plot that very consciously make the story such that the dystopia that you see in front of you in the movie universe defies common sense. We never meet any of Elysium’s citizens or get a sense of how they act towards people. They are apparently conditioned to be like the French elite at the eve of the French Revolution. They do not care about the poor and live their own lives, presumably paid for by the income generating assets that they own. &lt;/p&gt;

&lt;p&gt;More importantly is the metaphor of advanced health care, which is represented by the all-healing Med Bay. It is a pretty awesome device. It can heal anyone who is not dead even if they are just slivers away from it. What a product! I would love to see how it works. Presumably it goes to show the miracle of modern medicine, which can make diseases that were once fatal now curable. However, modern medicine is not like this. There are costs associated with making this product. There are tools and instruments that have to be paid for. There is expertise that costs money and investment to develop (in the form of doctors). But the med bay is automated. It presumably uses no other resource but energy. It also is instanteous. What the hell? Why haven’t the citizens and hospitals of the world simply replace all their nurses and casts with one of these bays and just cycle people in and out all day? This is a product that supposedly is owned by every rich person on Elysium. What if just one of these rich people grows a heart and decides that he would just send his own to earth once a month to heal like a million people? It would certainly satisfy someone’s ego to know that they are a sort of a savior. This seems to be common sense and perhaps such a dystopia is defined by the lack of said common sense, but it puzzled me as a viewer of the movie. &lt;/p&gt;

&lt;p&gt;Another issue I had with the movie was its depiction of the Malthusian apocalypse. In this dystopia, the world has become such that now there are not enough resources for everyone. People have been talking about this sort of thing happening forever (it for example shows up in that new Dan Brown book Inferno). I am not sure what to think about such an event. I feel that the system that has been created and put into place today more than guarantees that are enough resources for people. There have been many times that people and analysts would put a constant growth rate on something and simply assume that in the not so distant future that the reckoning would finally come about. Disasters are rare. They are acts of God. In reality, life changes and adapts. Agriculture adapts and becomes more productive. New technologies are developed in order to create new opportunities for making more of the resources that we have or use entirely new types. Peak oil was huge. I read a book called “Twilight in the Desert” by Matthew Simmons and in it he talked about the decline of the Ghawar oil field in Saudi Arabia, which would then lead to the decline of Saudi Arabia as the provider of cheap oil, which would then cripple the economy. The book was convincing and indeed it seems like Ghawar, the biggest oil field ever found, is on its way out. However then came the rise of “Saudi America”, where fracking and other new alternative energy technologies have emerged to replace the loss of oil from Ghawar. New externalities can still occur to replace virtually anything that we have lost. For example, what happens if that hair-brained idea from the Google guys works? The one where they land a satellite on an asteroid and mine its resources? These examples are easy to rebut right here, but the point remains solid: That systems are robust and adaptable. They change in according to the forces acting on them. Life finds a way. &lt;/p&gt;

&lt;h3 id=&quot;my-conclusion&quot;&gt;My Conclusion&lt;/h3&gt;

&lt;p&gt;I enjoyed the movie. The melodrama made me cry, something that a lot of movies have been doing to me lately. The action was satisfying. It needed more robot stuff to satisfy the lizard brain “smash head with rock” side of me, but I still think that it did a fine job. Not everything can be Pacific Rim. &lt;/p&gt;

&lt;p&gt;The one thing that I did not enjoy was the world building that tried to do more than it could. The Med Bay is just one example, but it was the most glaring. What a device! It is the least plausible thing for me to swallow. That being said, it is a movie and a technically well made one. &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/elysium-review&quot;&gt;Elysium&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on August 10, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Anime Review: Sakurasou no Pet na Kanojo]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/sakurasou-pet" />
  <id>http://jonathanstyu.github.io/sakurasou-pet</id>
  <published>2013-08-04T00:00:00-07:00</published>
  <updated>2013-08-04T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;p&gt;Crunchyroll calls this the Pet Girl of Sakurasou, which brings up an uncomfortable imagery. For the sake of brevity, I will call this SPK. This is a highly enjoyable series based on a 10-volume set of light novels. I have not read all that much of the light novel series (the tone of which I found somewhat bizarre and a little conventional), but I found that this series did a phenomenal job of adapting the series. &lt;/p&gt;

&lt;h3 id=&quot;animation&quot;&gt;Animation:&lt;/h3&gt;

&lt;p&gt;SPK is a beautiful looking series, which is all the most intriguing considering that it has an urban setting. There are a lot of great looking series out there but many of them are set in great looking places like some sort of ocean town. Sola is an example that comes to mind. However, there are not a whole lot of series that manage the act of creating beauty from an otherwise unbeautiful thing: the city. There are places where you just have to pause the video and take in the imagery. &lt;/p&gt;

&lt;p&gt;The majority of the characters are memorable with Mashiro standing out most of all. I think Mashiro - who herself vaguely resembles the cats that Kanda takes care of - is the best looking character I have seen in all of the series that have come out of 2012. Considering what she looks like in the light novel illustrations, in where she looks like a pretty ordinary - if occasionally confused - girl, this is incredible. Probably the biggest gap in anime-novel design since the work Akio Watanabe (of World God Only Knows fame) did in Bakemonogatari (Senjougahara in the novel illustrations looked absolutely bizarre). I took a look at the work character designer Masahiro Fujii did in other anime and found him having also done timeless, classic works like Zero No Tsukaima and Yumekui Merry. How about that? You never know where talent comes from. The rest of the characters are well designed in a way such that they are memorable. You will not find yourself wondering as to whether or not you have met this character already. This is a big deal. &lt;/p&gt;

&lt;p&gt;Both of this in of itself are not a huge deal. There are plenty of series out there that are very good looking. The standards of the new decade have become such that even the worst of the crap that gets put out into the new season have great looking character designs and scenery. So it means a lot more that this sort of stuff is backed with a great story and performances as it is with SPK. &lt;/p&gt;

&lt;h3 id=&quot;sound&quot;&gt;Sound:&lt;/h3&gt;

&lt;p&gt;The character acting is great. Ano Hana’s Ai Kayano does a great job here taking the other side of the temper bar for Mashiro. This is a different role from what she has done for Hyouka, Servant x Service and even Say You Love Me. She takes the same type voice tone in Guilty Crown but … let’s not talk about that again. In SPK, she does a great job. Her Mashiro has a dry boke humor and delivers ridiculous lines in a level tone that is pretty hilarious. And when the mood changes, her voice cracks with a certain twinge of emotion that is absolutely heart breaking. She was the right VA for the role and it is hard to imagine anyone else taking this sort of role.&lt;/p&gt;

&lt;p&gt;The rest of the cast is incredibly great as well. This is not a series that requires someone to give the same performance over and over again. People laugh, cry, fall in love, and break their hearts. Yoshitsugu Matsuoka’s Kanda does funny, stupid and angry in all the right ways. His voice is also very distinct unlike how it is with many other male characters. Mariko Nakatsu has a phenomenal voice as the Aoyama. Like Attack on Titan’s Yui Ishikawa, I hope that she is just at the start of her career and goes on to do some other great roles into the future. Natsumi Takamori is completely 100% unrecognizeable as the dour, dark girl from Another (coincidentally also named Misaki). I like to imagine that it is the same Misaki in both series and that she commutes between both stories every other week, taking off her eyepatch and turning into this crazy sounding Genki-girl. &lt;/p&gt;

&lt;p&gt;The music is ordinary and not at all that memorable. It does not stand out on its own but supports the story very well. Writing from my own perspective of having watched the series a bit ago, there are no pieces of background music that caught my attention. The OP and ED are great, following the Toradora formula in taking a happy light tone at the start and then transitioning into something darker and more serious in the second half. I especially enjoyed OP1, with an opening hook that reminds you of the pounding heartbeat you get when you meet your first love. &lt;/p&gt;

&lt;h3 id=&quot;story-and-character&quot;&gt;Story and Character:&lt;/h3&gt;

&lt;p&gt;I combine these. This is probably the one big series surprise of 2012. In fact it takes on the dream that any author should have with their own work. It starts out with a premise that had the potential of being something real stupid but then unexpectedly transitions itself into something much deeper and more rewarding. But if it were that stupid then this story would never have gotten 26 episodes. The directors knew how to handle this property and they did it well. &lt;/p&gt;

&lt;p&gt;It starts out with this premise that Kanda has to take care of this girl named Mashiro, who is an art prodigy. She is great at what she does but otherwise has no idea how to take care of herself in the real world. She is so quiet and foolish that it almost hinges on autistic territory, and I found myself at first uncomfortably taking on these comparisons. Were they aiming to make fun of autistic people? But the best way to fight these sort of comparisons is to deliver a deep, fulfilling and rich story and flesh out these characters from their empty initial husks. SPK did this. Very quickly they advance the story and just as speedily I left behind these thoughts and misgivings. &lt;/p&gt;

&lt;p&gt;I read the first volume of the light novel and found it awkward and clumsy in how it handled the story. The author may have been trying to get himself into the right tone and setting. The directors of the anime, well aware that they had the time and luxury to create a great story here, revamped a lot. They were not afraid to mess with the source material to get the best story that they can get. For a non spoilery example, in the novel Kanda is told from the very beginning that Mashiro is a great and famous painter. This is not the case in the anime, where this is hidden from both Kanda and the viewer until the very end of the episode, whereupon it hits you with a lot of force. There was also a whole lot of fan servicey stuff that was taken out from the books, which I think did much in making the story move faster and flow much better. &lt;/p&gt;

&lt;p&gt;There are a lot of series that do a great job of creating story and characters on their own terms. For example, my favorite yardstick is always Ga-Rei Zero, which has this ridiculous universe in where you have spirits and monsters but crafts a beautiful, touching and heartbreaking story from it. It just goes to tell you that the best stories happen anywhere. They are great not because of where they are set, but because of the way that bring out our essential humanness. For many series, they have to create this universe and brings us into it. Very few series try to bring a great story into our own world. Even fewer succeed. SPK does. This is the most “real” series that I have ever watched since Hataraki Man (which was depressing in its own way). Barring the ridiculous premise of an art prodigy and what not, it is not hard to imagine a story like this happening in our own real world. &lt;/p&gt;

&lt;p&gt;The directors knew from the very beginning what sort of tone and theme they want to hit with SPK: that of growth and togetherness of family. No series does a better job of talking about family and togetherness than Full Metal Alchemist but this is a close second and I give it honorable mention because FMA created its own universe. The challenges and tribulations that these characters go through - which I think people can sympathize with so closely - that there are times when I am not sure whether or not they are talking about the characters or myself. We have all gone through disappointments, failures, and uncertain futures. SPK’s characters do the same. They try their best, fall short, and sit in the dark, setting sun wondering whether or not that they are good enough in this world to survive. Just like any of us. These are the same real world disappointments that we all have to live through. It is just part of being human. The way that these people get past it and live to live another day should inspire. They are lonely, bizarre souls lashed together in the midst of the turbulence of a cold, cruel world. Only by holding to each and one another can they survive. Same should be for us. &lt;/p&gt;

&lt;p&gt;I believe that SPK has a great story. It is a story that will catch your attention. You will love these characters and want them to succeed. You will keep tuning in again and again to see if they do. &lt;/p&gt;

&lt;h3 id=&quot;value-and-enjoyment&quot;&gt;Value and Enjoyment&lt;/h3&gt;

&lt;p&gt;This is the surprise of 2012 and worth the time to watch. Unfortunately it did not seem to be such a huge hit and this is probably the last we will see of SPK. This is eminently disappointing because the story at the heart of this series is better than much of the crap that we see dumped into the market. There are a lot of series that make first choice for recommendation but I think this is a good dark horse choice for those who want to see something different and unconventional.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/sakurasou-pet&quot;&gt;Anime Review: Sakurasou no Pet na Kanojo&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on August 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Integrating With Craigslist]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/integrating-with-craigslist" />
  <id>http://jonathanstyu.github.io/integrating-with-craigslist</id>
  <published>2013-07-11T00:00:00-07:00</published>
  <updated>2013-07-11T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;creating-a-form&quot;&gt;Creating a form&lt;/h3&gt;

&lt;p&gt;Rene and I had talked about one of the challenges of creating a rental form collection product would be that when it comes to marketing, there is nothing that beats Craigslist. Craigslist is the end all, be-all when it comes to marketing rentals and trying anything else would be a waste of time. So one of the challenges is that there is no Craigslist API. There is no automated way to put a listing onto Craigslist. So the only way is to do it through human effort. But while it is not possible to do this automatically, we can try to make it as easy as possible. Rene suggested that we would be able to provide HTML templates of the ads. You would pick a Craigslist List template and it would spit out the HTML that you could then just copy and paste right into the entry. This is the major challenge that I was urged to work on today.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/integrating-with-craigslist&quot;&gt;Integrating With Craigslist&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 11, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Fleshing Out Form]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/fleshing-out-form" />
  <id>http://jonathanstyu.github.io/fleshing-out-form</id>
  <published>2013-07-10T00:00:00-07:00</published>
  <updated>2013-07-10T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;fleshing-out-a-powerful-client-side-form&quot;&gt;Fleshing out a Powerful Client Side Form&lt;/h3&gt;

&lt;p&gt;I have created a few forms before for Rails and I have played around with Backbone before too. However this is the first time I really have gone heads first with creating a complex, single page application that would help create an applicant for a rental by collecting its parts, saving them, even validating them, and then submitting them all on the client side. It is kind of amazing if you think about it. Once Rails sends down the JavaScript code to the browser, there is not a single bit of interaction between the server and the user until the user is ready to send up the data and the data is complete in a way that is ready to receive.&lt;/p&gt;

&lt;p&gt;Having worked on a similar product before in CareDox, I found that the less interaction between the user and the server, the quicker and better. Paul had implemented a bit where the data would constantly be sent and updated on the server side but since the server was so slow, it took forever to get anything done. I would type something into a box then wait impatiently for about 2-3 minutes. It by itself did not take all that long but in the end since the form is so long it would take forever and it was incredibly demoralizing. I decided then that for the rentForm I wanted a product that basically did all the validations on the client side and did not touch the server at all until the thing was ready to submit. And when it was done, then it would send it all up in just one big hash. This was the goal. How can someone go ahead about that? Yesterday was the easy part, just creating the forms on the HTML. Now it is time to actually make them functional.&lt;/p&gt;

&lt;p&gt;I started with creating a number of models in Rails that would represent the parts of the form that would eventually be modular. These were the incomeDetails, emergencyContacts, personal references, and rent histories. These would all be models that “belong’ to the applicant. Then the applicant model would accept a nested attributes for these individual parts. There were no validations on the backend because God knows what I would do in that case if something came back bad. Seems like a pretty thin tightrope so the code on the front end is going to have be really air tight.&lt;/p&gt;

&lt;p&gt;On the front end, I put a Backbone app into the page but unlike how I did it with all the other Backbone apps that I created in the earlier days, I was going to tweak the formula. When I initialized the router, I created one Backbone model, which represented a single applicant. Eventually I will be able to have multiple applicants in a single submission (using collections) but I figured that can wait until later. For now we have to be happy with what can be done.&lt;/p&gt;

&lt;p&gt;Becuase the app has a sidebar and advances throughout the page, I wanted data to be capable of being “saved’ and persisted to a single instance of the Backbone model. This way, the single Applicant would be built over time and then submitted with a single AJAX call. When I first wrote the form I wrote it in a traditional way. The name of the input would be something like “applicant[name]’ or in the case of a nested attribute “applicant[nested_attribute][0][name]’. But then I found that when someone hit the button and I made the call to Backbone to “set’ the attributes, that the applicant attributes would not “build up’. Instead, the latest one would replace the earlier ones. This is because of the way the “set’ seems to work. Because the attributes are all nested under “applicant’, I found that it would simply reset the entire set of the applicant attributes. Deleted everything that I had done before! I was displeased and Googled for a bit for a solution. Did not find one. So I decided upon a hackish roundabout way. I took out the “applicant’ in all the name fields of the form so that I could set the attributes raw. This made sure that nothing got overrode because Backbone.model.set only looks at what is different. So the Applicant.attributes would have like “nested_attribute-0-bunch of stuff’. I then overrode the to_JSON for the Applicant model so that it would take all the attributes and then wrap them in a single applicant object and return that. This did the trick. Now all the params are in a proper format so that Rails can accept them and use them to create a complete Applicant model instance.&lt;/p&gt;

&lt;p&gt;But I was not done. I wanted to have validations. Validations is built into the model class but there were two problems that made it unamenable to what I wanted to do. First, validation is called only upon “save’. So that it would be such that nobody can see that they are doing it wrong until they hit the big red button at the end of the entire form! Imagine how irritated you would be if you would spend 15 minutes on a rental form, hit submit, and then suddenly find that it had spit back a whole bunch of crap errors at you. You want to know about these errors as soon as possible. Also, since the sections like personal reference and such are all actually representative of separate models from the actual applicant model, it would have made me to go and create separate Backbone models for all those individual things and that was just going to go drive me insane. So I decided that I would roll my own validation set for this page. I created a “validate’ funct that would be called and I passed to it the serialized form data created at the click event as well as a callback function that simply sets the attribute and handles the rest of the other stuff that successfully saves. Not DRY at all since this is a feature that needs to be in all of the Views that I have throughout the Backbone app but without work I am not excited to do I am not particularly excited to refactor it. For now we shall have to live with it. I also made arbitrary decisions on what should or should not be required. In the future, I would like to see this customizable and I do see a way forward to it. Would have to be on the backburner for now though.&lt;/p&gt;

&lt;p&gt;The form product continues to need some work but I am going to turn my attention elsewhere tomorrow as I am going to spend some time working on the dashboard and what the landlord is going to see as he goes about finding tenants. I am interested in seeing how this is going to work especially if I might tag particular applicants as acceptable or not. PerfectPerusals was in my opinion rather simple and really was just a project. I want RentForm to be something real. Something that customers might actually want to use. I really want this product to be something that can actually be impressive. But that means I am going to have put a lot of work into it. Just keep at it.&lt;/p&gt;

&lt;p&gt;Things I Should Do: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Refactor some of the code that would simply validate for presence so that a user can eventually just pass in a number of attributes that they want the app to validate for and it would simply do that.&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/fleshing-out-form&quot;&gt;Fleshing Out Form&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 10, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Near The End]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/near-the-end" />
  <id>http://jonathanstyu.github.io/near-the-end</id>
  <published>2013-07-08T00:00:00-07:00</published>
  <updated>2013-07-08T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;final-projects&quot;&gt;Final Projects&lt;/h3&gt;

&lt;p&gt;Today some people decided that it would make more sense to continue working on their final projects. Some of these apps that I have seen are really really good. Quite impressive if you ask me. However in my case I decided that I would like to move on and work on a different app. GoodReads is cute but I have been thiking for a long time about a particular app that I think might be good to be looking at. The app that I decided to work on is a rentform app that I think is going to help people collect the forms and help budding land lords collect forms for a particular listing.&lt;/p&gt;

&lt;p&gt;The core functionality of this app is going to be the collecting of a form. Simple enough, but this thing is going to be very freaking difficult because there are going to be so many different parts of the form and that they are split up between the different parts of the whole application. There are personal references, employment history, emergency contacts, rent history, and personal information. I am going to spend some time and think about how this should be executed. My thinking right now is to split this up into a whole bunch of different models that are going to be submitted together as a single thing.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/near-the-end&quot;&gt;Near The End&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 08, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Tightening Up]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/tightening-up" />
  <id>http://jonathanstyu.github.io/tightening-up</id>
  <published>2013-07-05T00:00:00-07:00</published>
  <updated>2013-07-05T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;final-projects&quot;&gt;Final Projects&lt;/h3&gt;

&lt;p&gt;In today’s chronicle, Jonathan spends time cleaning up and tightening the screws on PerfectPerusals. I am pretty satisified with much of what was done but I still think that there are a few flaws here and there that would require some research to competently address.&lt;/p&gt;

&lt;p&gt;The main issue regards how I want to implement the Friend Feed. The way I am doing it right now is to have a number of disparate objects which the back end collects and pukes out at the client. I then wrote client side code that would let the browser interpret all that and put it together in a simple organized way. To me this seemed like a pretty hackish way but for just displaying the friend feed it worked. Can’t really complain.&lt;/p&gt;

&lt;p&gt;However, then came the real issue. I realized relatively later that people can comment not only on Reviews but also shelvings of books and adding of friends. What the heck? I have never seen this sort of functionality before. Does this make sense at all? Well it is there so I have to implement it. Now the way I could probably do it is just to create separate “comment” objects. That would be a dangerous way to do it and I was not excited about that. The other way is to use inheritance, namely multi table inheritance, which is something that is going to be pretty cool. The parent class would have its own table but not only that there would be children and those children have their own tables. It is awesome, but it is not standard and though it is too late to use it for PP, I would think that it would be nice to try it for my next project.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/tightening-up&quot;&gt;Tightening Up&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[More Things]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/more-things" />
  <id>http://jonathanstyu.github.io/more-things</id>
  <published>2013-07-04T00:00:00-07:00</published>
  <updated>2013-07-04T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;creating-perfect-perusals-not-this-blog&quot;&gt;Creating Perfect Perusals (Not this blog)&lt;/h3&gt;

&lt;p&gt;For the first half of my two final projects, I decided to create a clone of GoodReads, which is a service that I greatly enjoy and like using. It is indeed quite of the most used products out there on the web. I use it more than Facebook.&lt;/p&gt;

&lt;p&gt;The part that I felt was more like cheating was that GoodReads is not all that much of a single page app. It is in fact feels much more like something that almost entirely serves up its pages through Rails and has little if any JavaScript to do heavy client side stuff other than pop ups and scrolldowns. I wondered if a straightforward clone of GoodReads would be enough to challenge myself and create a product that would be something that be a great learning experience.&lt;/p&gt;

&lt;p&gt;PerfectPerusals is something different. It is still heavy on the Rails stuff. It is not something ridiculous like Trello. This is in accordance to my interest and better comfort with Rails than Javascript. It is going to use Rails to serve up a lot of pages but from time to time I am going to use a dollop of Backbone in order to update and keep the server going.&lt;/p&gt;

&lt;p&gt;The most challenging part of the entire project has been trying to figure out a right way to do these things that would make things easy for the future features that I want to build and implement in the future. I look at the finished GR product and I marvel at all these features. I end up thinking real hard about a simple easy way to get all of these into PerfectPerusals, like as if there is one single path that would just gracefully ice skate in between these Scyllas and Charybidses. I doubt that there is ever one such in the world. You can only look ahead ever so many steps.&lt;/p&gt;

&lt;p&gt;I am not looking to implement every one of GR’s features. In this demo I am looking to focus on a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User profile pages&lt;/li&gt;
  &lt;li&gt;Author profile pages&lt;/li&gt;
  &lt;li&gt;Signup and Sign in&lt;/li&gt;
  &lt;li&gt;Book profile pages&lt;/li&gt;
  &lt;li&gt;Book shelves&lt;/li&gt;
  &lt;li&gt;Reviews of Books&lt;/li&gt;
  &lt;li&gt;Comments on Reviews of Books&lt;/li&gt;
  &lt;li&gt;Friending (maybe)
I started the project on Sunday and so far I have made encouraging progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User and Author profile pages were implemented with a single model User. I created a number of different filters in the User Controller that would look at whether or not a user had published any books, provided an email, and as such would then render the right page. I spent a lot of time getting the logic right and making sure that at least the right pages would show up.&lt;/p&gt;

&lt;p&gt;Signup and Signin were done without BCrypt, which I do think is a flaw but could be easily remedied. It had been some time since I had done something like this so I had forgotten a few things.&lt;/p&gt;

&lt;p&gt;I had made it so that people could embed their book reviews right into the profile page. It would also show the rest of the community’s reviews. This embedding of the book review form page was done with a relatively simple data-success helper from Rails. I felt like this would do a good job of simply posting the review to the database and appending it to all the other reviews listed in the page. However, I felt that this was a little cheating and would not give a lot of headroom for future expansion of the product going forward. For some of the other features I wanted to get more detailed.&lt;/p&gt;

&lt;p&gt;For the comments under a review, I went ahead and created a full on Backbone app that had its own particular set of routes and views that activated only if you hit the Show Review page. It lets you add comments onto the page and does something kind of like what the AJAX call did with the Add Review page on the Show Book page however I feel that the Backbone implementation could handle a lot more meat on its bones if I wish it to have in the future. This is probably going to be case as I go and implement Friending and friend commenting.&lt;/p&gt;

&lt;p&gt;Book shelves is challenging and I am working on this right now as we speak. We will talk more about it tomorrow as it is going to be the thing I hit head on!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/more-things&quot;&gt;More Things&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating Pp]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/creating-pp" />
  <id>http://jonathanstyu.github.io/creating-pp</id>
  <published>2013-07-03T00:00:00-07:00</published>
  <updated>2013-07-03T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;final-projects&quot;&gt;Final Projects&lt;/h3&gt;

&lt;p&gt;Today I spent more time on building up more features of PerfectPerusals, with the significant feature being the central API that would serve as the data consumption for the other parts of the application. It would presumably be the heart of a proposed iPhone or Android app and if I had the time and energy for it then I would be able to go write that too.&lt;/p&gt;

&lt;p&gt;The goal for today that I set yesterday was to build on the friending infrastructure that I set up yesterday in like ten minutes and create a full friend feed that would give someone access to a stream of events that a person’s entire set of friends have performed in the past two or three weeks. I had thought deeply about this throughout my morning run and shower. When I started the system I had created a number of model objects that would be separated throughout the system. My concern was that there was no relations between any of the model objects and if I should go and create a friend feed out of it then I would have to 1) Somehow gather them all together under one unified umbrella and like the Ring of Power unite them and 2) somehow create a single front end that would be able to go and consume all that varying data. Now looking back on it, it might have made more sense to be able to go and create a single Rails model Object that all the others - taggings, friendings, reviews and comments - and such would inherit from: Event. This event would then be easily gathered and exported. Of course the grass is always greener on the other side. Who knows what other problems that I could have came across then.&lt;/p&gt;

&lt;p&gt;The center point of everything that I was working on was the introduction of RABL, which is something that I had seen before scattered throughout the CareDox site but never really figured out. I was wrestling the alligator of as_json when I asked Paul for some help. He simply said that I should use RABL instead to export all that data. I decided that this would be a good idea and then for the next four hours spent them wrestling with RABL and trying to make it such that it would capably export all the data in a format that would be consumed by the front end Backbone that I set up on the dashboard home page.&lt;/p&gt;

&lt;p&gt;The challenge with RABL is implementing all the logic that would be able to go and smooth out all the data that is getting thrown at it. I created some lmabda if statements that would be able to parse out the different data points. Thank Goodness this is Ruby and I could query the data structure for its class name. If this was on the Client side then it would all be called “Object” and then I would have to had to create something to work around that. Then after that the challenge was making it so that the data could be easily accessible and that the relevant data points are all available. For example, I wanted the API to be able to say that a Review was written by a certain writer. I had Rails export not only the Review object but also the associated writer “Reviewer”. But then since the Reviewer on the actual Review object is just a number then I also modified the RABL to query and export the name. Then the client side would have very easy access to all the data that it needs to have. The RABL became all the unified data points that I need. With a good API, things became must easier.&lt;/p&gt;

&lt;p&gt;Things I Need to Remember&lt;/p&gt;

&lt;p&gt;After adding new searchable blocks, remember to run “rake sunspot:reindex” so that it will go through the database and reindex stuff. I spent like 35 minutes in the morning working on this as I fiddled with SunSpot throughout the entire part of the morning while munching on a bucket of fried chicken.
What I want to Work On Friday:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete following (if possible)&lt;/li&gt;
  &lt;li&gt;Friend messages&lt;/li&gt;
  &lt;li&gt;Friend recommendations&lt;/li&gt;
  &lt;li&gt;More stats?&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/creating-pp&quot;&gt;Creating Pp&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Deploying Pp]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/deploying-pp" />
  <id>http://jonathanstyu.github.io/deploying-pp</id>
  <published>2013-07-02T00:00:00-07:00</published>
  <updated>2013-07-02T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;final-projects&quot;&gt;Final Projects&lt;/h3&gt;

&lt;p&gt;Today I spent more time on building up more features of PerfectPerusals, with the significant feature being the central API that would serve as the data consumption for the other parts of the application. It would presumably be the heart of a proposed iPhone or Android app and if I had the time and energy for it then I would be able to go write that too.&lt;/p&gt;

&lt;p&gt;The goal for today that I set yesterday was to build on the friending infrastructure that I set up yesterday in like ten minutes and create a full friend feed that would give someone access to a stream of events that a person’s entire set of friends have performed in the past two or three weeks. I had thought deeply about this throughout my morning run and shower. When I started the system I had created a number of model objects that would be separated throughout the system. My concern was that there was no relations between any of the model objects and if I should go and create a friend feed out of it then I would have to 1) Somehow gather them all together under one unified umbrella and like the Ring of Power unite them and 2) somehow create a single front end that would be able to go and consume all that varying data. Now looking back on it, it might have made more sense to be able to go and create a single Rails model Object that all the others - taggings, friendings, reviews and comments - and such would inherit from: Event. This event would then be easily gathered and exported. Of course the grass is always greener on the other side. Who knows what other problems that I could have came across then.&lt;/p&gt;

&lt;p&gt;The center point of everything that I was working on was the introduction of RABL, which is something that I had seen before scattered throughout the CareDox site but never really figured out. I was wrestling the alligator of as_json when I asked Paul for some help. He simply said that I should use RABL instead to export all that data. I decided that this would be a good idea and then for the next four hours spent them wrestling with RABL and trying to make it such that it would capably export all the data in a format that would be consumed by the front end Backbone that I set up on the dashboard home page.&lt;/p&gt;

&lt;p&gt;The challenge with RABL is implementing all the logic that would be able to go and smooth out all the data that is getting thrown at it. I created some lmabda if statements that would be able to parse out the different data points. Thank Goodness this is Ruby and I could query the data structure for its class name. If this was on the Client side then it would all be called “Object” and then I would have to had to create something to work around that. Then after that the challenge was making it so that the data could be easily accessible and that the relevant data points are all available. For example, I wanted the API to be able to say that a Review was written by a certain writer. I had Rails export not only the Review object but also the associated writer “Reviewer”. But then since the Reviewer on the actual Review object is just a number then I also modified the RABL to query and export the name. Then the client side would have very easy access to all the data that it needs to have. The RABL became all the unified data points that I need. With a good API, things became must easier.&lt;/p&gt;

&lt;p&gt;Things I Need to Remember&lt;/p&gt;

&lt;p&gt;After adding new searchable blocks, remember to run “rake sunspot:reindex” so that it will go through the database and reindex stuff. I spent like 35 minutes in the morning working on this as I fiddled with SunSpot throughout the entire part of the morning while munching on a bucket of fried chicken.
What I want to Work On Friday:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete following (if possible)&lt;/li&gt;
  &lt;li&gt;Friend messages&lt;/li&gt;
  &lt;li&gt;Friend recommendations&lt;/li&gt;
  &lt;li&gt;More stats?&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/deploying-pp&quot;&gt;Deploying Pp&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 02, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating Pp]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/creating-pp" />
  <id>http://jonathanstyu.github.io/creating-pp</id>
  <published>2013-07-01T00:00:00-07:00</published>
  <updated>2013-07-01T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;final-projects&quot;&gt;Final Projects&lt;/h3&gt;

&lt;p&gt;Today I spent more time on building up more features of PerfectPerusals, with the significant feature being the central API that would serve as the data consumption for the other parts of the application. It would presumably be the heart of a proposed iPhone or Android app and if I had the time and energy for it then I would be able to go write that too.&lt;/p&gt;

&lt;p&gt;The goal for today that I set yesterday was to build on the friending infrastructure that I set up yesterday in like ten minutes and create a full friend feed that would give someone access to a stream of events that a person’s entire set of friends have performed in the past two or three weeks. I had thought deeply about this throughout my morning run and shower. When I started the system I had created a number of model objects that would be separated throughout the system. My concern was that there was no relations between any of the model objects and if I should go and create a friend feed out of it then I would have to 1) Somehow gather them all together under one unified umbrella and like the Ring of Power unite them and 2) somehow create a single front end that would be able to go and consume all that varying data. Now looking back on it, it might have made more sense to be able to go and create a single Rails model Object that all the others - taggings, friendings, reviews and comments - and such would inherit from: Event. This event would then be easily gathered and exported. Of course the grass is always greener on the other side. Who knows what other problems that I could have came across then.&lt;/p&gt;

&lt;p&gt;The center point of everything that I was working on was the introduction of RABL, which is something that I had seen before scattered throughout the CareDox site but never really figured out. I was wrestling the alligator of as_json when I asked Paul for some help. He simply said that I should use RABL instead to export all that data. I decided that this would be a good idea and then for the next four hours spent them wrestling with RABL and trying to make it such that it would capably export all the data in a format that would be consumed by the front end Backbone that I set up on the dashboard home page.&lt;/p&gt;

&lt;p&gt;The challenge with RABL is implementing all the logic that would be able to go and smooth out all the data that is getting thrown at it. I created some lmabda if statements that would be able to parse out the different data points. Thank Goodness this is Ruby and I could query the data structure for its class name. If this was on the Client side then it would all be called “Object” and then I would have to had to create something to work around that. Then after that the challenge was making it so that the data could be easily accessible and that the relevant data points are all available. For example, I wanted the API to be able to say that a Review was written by a certain writer. I had Rails export not only the Review object but also the associated writer “Reviewer”. But then since the Reviewer on the actual Review object is just a number then I also modified the RABL to query and export the name. Then the client side would have very easy access to all the data that it needs to have. The RABL became all the unified data points that I need. With a good API, things became must easier.&lt;/p&gt;

&lt;p&gt;Things I Need to Remember&lt;/p&gt;

&lt;p&gt;After adding new searchable blocks, remember to run “rake sunspot:reindex” so that it will go through the database and reindex stuff. I spent like 35 minutes in the morning working on this as I fiddled with SunSpot throughout the entire part of the morning while munching on a bucket of fried chicken.
What I want to Work On Friday:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete following (if possible)&lt;/li&gt;
  &lt;li&gt;Friend messages&lt;/li&gt;
  &lt;li&gt;Friend recommendations&lt;/li&gt;
  &lt;li&gt;More stats?&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/creating-pp&quot;&gt;Creating Pp&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on July 01, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Discussion]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/discussion" />
  <id>http://jonathanstyu.github.io/discussion</id>
  <published>2013-06-28T00:00:00-07:00</published>
  <updated>2013-06-28T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;talking-with-ned&quot;&gt;Talking with Ned&lt;/h3&gt;

&lt;p&gt;Today we spent the morning in lecture as Ned talked to us about the ins and outs of finding work in the tech industry. It was needless to say very much of the type of conversation I would expect to hear from someone like Ned: There was a ruthlessless and calculating systematic-ness in all of it mixed in with his own little version of bizarrely encouraging pep talk. He told us that we undervalued ourselves and our skills. His words are strangely uplifting though I am not so sure how much they will be when we start on this crushing path of rejection.&lt;/p&gt;

&lt;p&gt;The project that we were to build is a clone of Gist, which is something that I am not particularly familiar with. The thing that was challenging about this project was not that it was built in Backbone on Rails, of which the big picture I am pretty comfortable with, but it is about the little details of the project. Little things that made me greatly appreciate the job that Paul has when he decides on whether or not to create particular parts of the product. I am still working at it as we speak and hope to get more done when I get home tonight.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/discussion&quot;&gt;Discussion&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 28, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Newsreader]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/newsreader" />
  <id>http://jonathanstyu.github.io/newsreader</id>
  <published>2013-06-27T00:00:00-07:00</published>
  <updated>2013-06-27T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;news-reader&quot;&gt;News Reader&lt;/h3&gt;

&lt;p&gt;Today is a solo project and it is the first Rails and Backbone app that I have built yet that features some internet connectivity and interactivity … even if the instructors wrote that and not me. The goal of this news reader is to exercise much of the skills that we first developed yesterday when we embarked on our Backbone journey. There is a lot to do in terms of what we need to do. The main goal is to understand how to instantiate entries and feeds and handle the two of them simultaneously without really rendering some of the associations that Rails models have. In fact, Backbone models do not have all that many capabilities to handle associations.&lt;/p&gt;

&lt;p&gt;The demo came out to us having all of its API already fleshed out but I did take some time to sit down and implement some things like users and subscribed feeds. It took about an hour but now someone can sign up a la Instapaper (without a password) and then see their subscribed feeds on their index page. Back to the app. The idea behind this product is that it would use a gem to call a URL and pull down a number of items from a feed. It would then wrap those items into an Entry ruby class and assign them the feed key. So then you could then call up the Feed as a Rails object and see all of the subordinate entries underneath that item. The first challenge I found was that when I tried to call the “reload” method - which is the method you need to invoke - that it did not work. It sputtered out and did not create any Entries. I was very curious and it ended up that the method did not work because it did not properly prepare and wrap the URL before making the RSS call. It also did not properly assign the foreign_key of the instance of the Feed.&lt;/p&gt;

&lt;p&gt;After that I managed to set up the Backbone framework with the Backbone on Rails gem. After a few days of making folders and such and being confused about what went where in the system, the gem made things incredibly easy. I was real excited to see it all put together and Backbone pop up an alert to say “hello” when I navigated to the page.&lt;/p&gt;

&lt;p&gt;One of the challenges of making the feeds index page is to keep track of where the Router is instantiated, and where the models are and where they are available to the individual portions of the application. I instantiated a collection of feeds, called them from the Rails backend (I had the Rails backend handle all the trouble of identifying the current user and such) with “fetch”, and then passed them to the FeedIndex view. The first big bug that I came across was that the app was not seeing “JST” on the IndexView Backbone page, which means that it could not see the template. I had no idea what that meant. Darn Javascript errors being so lenient! I spent so much time trying to figure out what went wrong. Eventually it turned out that the error was not even on the View page! It was in the template with the embedded javascript. I had accidentally left an “=” in the code of a each loop and the result was that it tried to embed a piece of code that had nothing to embed. The result was a spectactular failure and a few less hairs on my head.&lt;/p&gt;

&lt;p&gt;The big thing that I was concerned about how was to handle the Entries and the Feeds. We did not have much relational knowledge and were not allowed to use it. The way we got around it was in the end that I would have the Rails back end reload all the feeds, create the Entries, pack them up and ship them as part of the association with the as_json(include: ) method. I instantiated a view for the entry Backbone model and then put that together. I overrode the parse method in the Feed model and had it create out of the associated entries a collection of Entry Backbone objects. That way I could then pass that into the View which would then capably handle that and create a page out of it. I then stitched together the rendered HTML from both views and shipped that out of the Backbone JS.&lt;/p&gt;

&lt;p&gt;I also added a static sidebar. Yesterday it was challenging to do that because the window kept vanishing on me. I was like huh every time. As it turns out the reason this was happening was because there was just one view and it was handling both of the two DIVs on the page. Creating two views and assigning one of them to exclusively handle the sidebar solved the issue.&lt;/p&gt;

&lt;p&gt;Creating products like this is pretty satisfying. There is still much to do in terms of the front end but I feel like creating things like static sidebars.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/newsreader&quot;&gt;Newsreader&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 27, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Backbone 101]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/backbone-101" />
  <id>http://jonathanstyu.github.io/backbone-101</id>
  <published>2013-06-26T00:00:00-07:00</published>
  <updated>2013-06-26T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;backbone-101&quot;&gt;Backbone 101&lt;/h3&gt;

&lt;p&gt;Today, we worked for the first time on backbone. It was the first time that we were allowed to use many the next and structures that backbone provides us as developers. The interesting thing is that much of the things that we learned in the few past days applied greatly to what we were doing today. I will have to get more into what this is all about and if it seems like I am being unclear it is not because I am trying to be obtruse but because I just do not understand it fully yet on my own.&lt;/p&gt;

&lt;p&gt;I think the first thing that I managed to grasp what’s the concept of models and collections. When you are thinking about what is a collection what is a model, it is not something that you see in Rails. Rails there are just models. Collections to me seemed quite unusual. But, as I continue to work with them and struggled with updating the collections and seeing them used to great effect in displaying overall information, I quickly realized that collections are powerful part of the front and development process.&lt;/p&gt;

&lt;p&gt;One of the interesting things that I have not seen before in our previous few days were the Backbone routers. A router is kind of like the one in rails, but the difference is that they handle the front end. There is a sort of divide between the URL that is “real” and the URL that is part of the JavaScript, which is marked with a #.&lt;/p&gt;

&lt;p&gt;I think it is interesting to see how these parts work together in order to create a working app. However it has been giving me plenty of headaches. It has been tough enough to make Rails itself work fine and dandy. Now I gotta make fine and dandy on the front end too!?! Agh!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/backbone-101&quot;&gt;Backbone 101&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 26, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Picture Tagger]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/picture-tagger" />
  <id>http://jonathanstyu.github.io/picture-tagger</id>
  <published>2013-06-25T00:00:00-07:00</published>
  <updated>2013-06-25T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;picture-tagger&quot;&gt;Picture Tagger&lt;/h3&gt;

&lt;p&gt;Today we continued with our big JavaScript project PictureTagger, which emulates the functionality of Facebook in that someone can log in, add pictures and then tag a picture with their friends. Such a simple piece of functionality as it turns out is something extremely and deeply complex. It really is something to be amazed about.&lt;/p&gt;

&lt;p&gt;Picture Tagger is our way to learn BackBone (which I keep confusing with BootStrap to turn into something called “BootBone” or “BackStrap”) without actually using BackBone. We split out our JavaScript code into different sections that hold templates, “controller” code, and views. We also wrote and created objects that would hold different objects, features, and then functions that we can then call. We had at first written all the code in the application.js file that comes in Rails but it quickly grew into a monstrosity that could fight Godzilla in some cheesy Japanese movie … like Rodan or Mothra or something. The key to understanding and getting past that was to realize that application.js is really one big compiled piece of JavaScript code. Once we have added things in the right order then we could quickly compartmentalize everything into neat and well understood piles.&lt;/p&gt;

&lt;p&gt;We also had to very well understand callbacks and how they work. We wrote a number of callback functions that we could then call as certain information comes available from the server. The goal was not to get too confused by all these callbacks by being very definite about what exactly each particular function will do. It is kind of amazing when we go into our “model” class for photos and then see all these callbacks being passed back and forth. It looks like a hot potato race. There are callbacks after callbacks.&lt;/p&gt;

&lt;p&gt;One of the bigger challenges that we had after figuring that out was to figure out how to create and position tags so that they float on top of the image. Dylan helped us a whole lot by coming up with a great solution. We would wrap the image with a div. The div would be placed in a “relative” position to the image, which is positioned “absolutely”. Then we would create and render the individual tags with “absolute” positioning and after hardcoding the x and y coordinates into the page we could then just append them onto the main wrapper div.&lt;/p&gt;

&lt;p&gt;There was also the challenge and going about and configuring the Rails backend too. It turned out to be quite essential to making the product work. There was a whole lot of stuff to be done. I find it hard to imagine that no matter how much Ryan says about just how separated the two halves - the front end and the back end - are from each other that how much they have to be integrated with each other. There were so many times that we would have to go back into Rails, switching between JavaScript and Ruby (so there were many Ruby statements with semi-colons on them), because we had to reconfigure the controller to make it all work smoothly between each other.&lt;/p&gt;

&lt;p&gt;I am sure there are plenty of bugs left behind to figure and work with but I am glad that this core functionality was implemented: A true full stack application with interactivity on the front end and robustfulness on the back end. You can take a look at our completed - and hackish - Picture Tagger here:&lt;/p&gt;

&lt;p&gt;https://github.com/jonathanstyu/picture-tagger&lt;/p&gt;

&lt;p&gt;Other Things I Think I Think:&lt;/p&gt;

&lt;p&gt;Jonathan’s weather report continues. It rained lightly today and the rain moistened my legs. It was one of those random days when it rained and it was dark but the air still felt kind of warm.&lt;/p&gt;

&lt;p&gt;Went to go see World War Z last Friday. Was pretty good but thought that we needed more scenes of zombies massing up and attacking people.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/picture-tagger&quot;&gt;Picture Tagger&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 25, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Threedo]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/threedo" />
  <id>http://jonathanstyu.github.io/threedo</id>
  <published>2013-06-21T00:00:00-07:00</published>
  <updated>2013-06-21T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;three-do&quot;&gt;Three-Do&lt;/h3&gt;

&lt;p&gt;Today was a solo day and it was a great opportunity to go and exercise a broad spectrum of our skills by creating a todo app - one similar to the one we had created last week and giving it a nice single-page flair with some Javascript and AJAX. By blowing up a lot of the stuff that we did yesterday, we were able to go and create a todo app that would let someone manage all of their information without doing a single refresh. It is pretty awesome.&lt;/p&gt;

&lt;p&gt;Three Things I learned Today:&lt;/p&gt;

&lt;p&gt;1) Javascript in the browser can get confusing when you have a lot of AJAX callback functions flying around&lt;/p&gt;

&lt;p&gt;2) You can go wild with Bootstrap and it is amazing&lt;/p&gt;

&lt;p&gt;3) The pages that are sent to you at the beginning can get pretty amazingly complex. I managed to stuff a whole lot of data into those web pages and it felt honestly pretty stuffed. I look forward to being able to start on Backbone now.&lt;/p&gt;

&lt;p&gt;You can find the github repo here: https://github.com/jonathanstyu/week6d5-threedo&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/threedo&quot;&gt;Threedo&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 21, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Return Of Rails]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/return-of-rails" />
  <id>http://jonathanstyu.github.io/return-of-rails</id>
  <published>2013-06-20T00:00:00-07:00</published>
  <updated>2013-06-20T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;return-of-rails&quot;&gt;Return of Rails&lt;/h3&gt;

&lt;p&gt;Today we spent the majority of our time working on a big extensive app and for the first time in a week - but it feels so long - Ruby on Rails makes its triumphant return. We built and created a RoR app that lets people tell secrets to one another. I assume that this is based on a real life business and product. The goal of the secrets product - which I keep misspelling as seacrest - is that this is going to be the place where we get to use a little bit of AJAX. Using some cool JQuery calls, we are going to be able to add and make calls to the database and the Rails backend without having to refresh and mess with the page.&lt;/p&gt;

&lt;p&gt;Next week we are going to start work with Backbone.JS, which is what Paul used to create CareDox. It is going to be very interesting for me to deal with that because of how the whole thing is structured. Backbone allows Rails to simply send you  the user with the computer and the browser - a lot of JavaScript code that would basically be an entire app in of itself. That app would run in the browser and then all the the Rails app would do is simply ferry data in between us and the user. It is pretty impressive if you ask me and it is going to be a great challenge for me to deal with it as I hit it next week.&lt;/p&gt;

&lt;p&gt;AJAX is the fringes of the technology. The goal was to make some requests to the server with some JavaScript code that was dropped and embedded right in the HTML. Then the HTML would make a request to the server and the server would respond with some data usually in the form of JSON. This is done with the controller actions. Where before I had went ahead and just had it render or redirect to a web page, I instructed the web page to come back with a JSONified version of the object in question. If I was saving an instance of a user, I would render that particular saved version of the object. That data would be attached to the page right there in the background with the magic of JQuery. With this we were able to have a signed in user create friendships with a list of users and then without refreshing the page then unfriend them. It is pretty amazing if you ask me. This was simple JQuery with refreshing and adding and toggling the different classes. We created a class that would hide a particular div or a form. If the web page makes a GET or a POST request, then the server would come back with an AJAX:Success web page and that would trigger a callback function that runs and then tells the JQuery code to manipulate the DOM as needed to show the user the information that he wants to see. The biggest trouble ironically enough had nothing to do with the actual AJAX and the JS. It was as always with CSS (Is it any other case?). By hiding and manipulating the classes of CSS we were able to create different looks and feels on the web page without actually doing anything on the server side. All the meanwhile the server is just sitting there waiting for the background data requests but sending nothing in the terms of the web pages and all. For the first time I finally get a sense of what Paul was shooting for when he started the monumental task of scrapping the old MotherKnows product and putting CareDox together from the ground up as a BackBoneJS product.&lt;/p&gt;

&lt;p&gt;Secrets and tagging secrets were the next thing to do. Secrets are owned by a user and they can be shown on the user’s profile page (the show.html.erb). The user wants to be able to make and update the page with his new secrets right there on the page. Can we do that? This is something that we have done before but with a lot of groundwork from the backend Rails server. It would take the data or re-render it or go and redirect the user to something else. With some well placed AJAX we could do the whole thing right there in the browser and the new secret could pop up on their web page show profile without any refreshing on our end. We siphoned off the form into a partial in another part of the app and embedded a remote =&amp;gt; true into it to make it something that is capable of making asynchronous javascript web page calls. I was pretty excited to see a tiny string (“wah”) show up on the screen. Small step for mankind, big step for JY’s Javascript.&lt;/p&gt;

&lt;p&gt;Then we created a Tag object so that secrets can get tagged. With a tag join table we could then associate the tag with the secret. This is nothing out of the ordinary. We had done this before. The interesting thing with this is that within the form with which we assign the tag to the particular Secret, we now can go and create additional select forms that would let us select more than 1 tag to go with our secret. In fact we could create a whole lot more! I remember that when we were creating our forms for Rails last week I was copying and pasting HTML over and over again and I was wondering what would happen if someone wanted to add more fields and say more to us? The product manager in me was like, “Well tough beans honey.” But now with some AJAX and smart JQuery we can go and do this. The challenge with this is that we needed to have all the names of the tags in the database and unfortunately the database has this data. Before with Rails we could just go and query the database for it with an easy a call as Tag.all. The browser cannot do that and even if it were then it would defeat the entire purpose of the call. The goal is to let the browser do its thing without any intereference from the server. The backend is to do nothing after it sends over that first ejaculation of Javascript until the client finally sends it back. How the heck is the JavaScript going to go and add new select fields to the form? What if the form needs to be modified? All these things present a challenge. The JS needs the DATA!&lt;/p&gt;

&lt;p&gt;The solution that Ned told us about felt to me oh so very secretive, turn coat and like the NSA. The way to do it is to create a script div that would have Ruby ERB. It would simply request that the server get all the tags, turn them into a HTML safe JSONified object and drop that into the DIV. It is not visible on the screen. It is just sitting there. To make sure that the browser does not render it, we make it a script tag with a “text/json” type there. (In fact the browser is going to ignore any script tagged with a type other than the text/javascript. How about that?) But the JQUERY code that we wrote inline in the HTML is going to be able to see it because we tagged it with the right ID! It felt to me like something out of a spy movie. It was pretty impressive.&lt;/p&gt;

&lt;p&gt;All in all, an exciting and exhilrating day. I feel much better making these apps than stupid Snakey.&lt;/p&gt;

&lt;p&gt;Things I learned Today:&lt;/p&gt;

&lt;p&gt;What the hell Backbone does
Bootstrapping resources right there in the script tags
AJAX calls with JQuery, and triggering actions from them with callback functions in Javascript
Underscore templates, which was interesting. Underscore is a much more important library than I first realize
Other Things I Think I Think:&lt;/p&gt;

&lt;p&gt;Bad day in the markets today. But it is a long term game and it is clear that despite the sluggish growth in the economy, companies today are going to make money and deliver profits for their shareholders. Long term shareholders should not fear anything if their companies are in great positions, deliver huge profits and pay those profits to shareholders in the form of dividends or buybacks.
I am disappointed that Lebron and the Heat escaped losing to the Spurs last night. I hope they meet their end in Game 7!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/return-of-rails&quot;&gt;Return Of Rails&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 20, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Snakey]]></title>
  <link rel="alternate" type="text/html" href="http://jonathanstyu.github.io/snakey" />
  <id>http://jonathanstyu.github.io/snakey</id>
  <published>2013-06-19T00:00:00-07:00</published>
  <updated>2013-06-19T00:00:00-07:00</updated>
  <author>
    <name>Jonathan Yu</name>
    <uri>http://jonathanstyu.github.io</uri>
    <email>jonathan@jonathanyu.net</email>
  </author>
  <content type="html">&lt;h3 id=&quot;snakey&quot;&gt;Snakey&lt;/h3&gt;

&lt;p&gt;This is going to be a quick post because I have to do some work right now. The homework tonight is to go and write a snake program. The program is going to be first written on the console and then brought over into the web page with the magic of JQuery.&lt;/p&gt;

&lt;p&gt;Today in our JQuery projects we added a UI to our Towers of Hanoi and Tic Tac Toe games. I am quickly getting tired of these two games. I wrote them in Ruby. Then wrote them in JS. Now I am writing them in HTML5 and JQuery. Sigh. And the quirks of the program meant that every time I wrote it I had to rewrite it again and again.&lt;/p&gt;

&lt;p&gt;The interesting way with how this program is set up is that you can put together a program like this and it seems like magic almost how it all comes together in JavaScript and JQuery. JQuery acts like magic some times - much like Rails - but at heart the instructors were clear to tell us that this was very much something real. There is JS in the heart of that.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://jonathanstyu.github.io/snakey&quot;&gt;Snakey&lt;/a&gt; was originally published by Jonathan Yu at &lt;a href=&quot;http://jonathanstyu.github.io&quot;&gt;Perfect Perusals&lt;/a&gt; on June 19, 2013.&lt;/p&gt;</content>
</entry>

</feed>